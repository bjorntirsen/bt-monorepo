name: CI

# This CI pipeline uses Turborepo remote caching for optimal performance.
# Remote caching is enabled via TURBO_TOKEN and TURBO_TEAM environment variables.
# No local cache needed - Turborepo handles all caching automatically.

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: "22.15.1"
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: bjorntirsens-projects

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Get pnpm version from package.json
        id: pnpmv
        run: echo "PNPM_VERSION=$(jq -r '.packageManager' package.json | cut -d'@' -f2)" >> $GITHUB_ENV

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Install deps
        run: pnpm install --frozen-lockfile

      - name: Validate renovate.json
        run: npx --yes --package renovate -- renovate-config-validator renovate.json

      - name: Run linting
        run: pnpm turbo run lint --continue

  format-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Get pnpm version from package.json
        id: pnpmv
        run: echo "PNPM_VERSION=$(jq -r '.packageManager' package.json | cut -d'@' -f2)" >> $GITHUB_ENV

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Install deps
        run: pnpm install --frozen-lockfile

      - name: Validate renovate.json
        run: npx --yes --package renovate -- renovate-config-validator renovate.json

      - name: Run format check
        run: pnpm turbo run format:check --continue

  type-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Get pnpm version from package.json
        id: pnpmv
        run: echo "PNPM_VERSION=$(jq -r '.packageManager' package.json | cut -d'@' -f2)" >> $GITHUB_ENV

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Install deps
        run: pnpm install --frozen-lockfile

      - name: Validate renovate.json
        run: npx --yes --package renovate -- renovate-config-validator renovate.json

      - name: Run type checking
        run: pnpm turbo run check:types --continue

  unit:
    needs: [lint, format-check, type-check]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Get pnpm version from package.json
        id: pnpmv
        run: echo "PNPM_VERSION=$(jq -r '.packageManager' package.json | cut -d'@' -f2)" >> $GITHUB_ENV

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Setup Node.js (with pnpm cache)
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm

      - name: Install deps
        run: pnpm install --frozen-lockfile

      - name: Run unit tests
        run: pnpm turbo run test --continue

  browser-tests:
    needs: [lint, format-check, type-check]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Get pnpm version from package.json
        id: pnpmv
        run: echo "PNPM_VERSION=$(jq -r '.packageManager' package.json | cut -d'@' -f2)" >> $GITHUB_ENV

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Setup Node.js (with pnpm cache)
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm

      - name: Restore Cypress binary cache
        id: cypress-cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/Cypress
          key: ${{ runner.os }}-cypress-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-cypress-

      - name: Install deps
        run: pnpm install --frozen-lockfile

      - name: Ensure Cypress binary is installed
        working-directory: apps/web
        env:
          CYPRESS_CACHE_FOLDER: ~/.cache/Cypress
        run: pnpm cypress install --force

      - name: Run browser-based tests
        run: pnpm turbo run test:browser-based --continue

      - name: Save Cypress binary cache
        if: steps.cypress-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: ~/.cache/Cypress
          key: ${{ runner.os }}-cypress-${{ hashFiles('**/pnpm-lock.yaml') }}

  build:
    needs: [unit, browser-tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Get pnpm version from package.json
        id: pnpmv
        run: echo "PNPM_VERSION=$(jq -r '.packageManager' package.json | cut -d'@' -f2)" >> $GITHUB_ENV

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Setup Node.js (with pnpm cache)
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm

      - name: Install deps
        run: pnpm install --frozen-lockfile

      - name: Build
        run: pnpm turbo run build --continue

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: |
            apps/**/dist
            packages/**/dist
            !**/node_modules/**

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Deploy
        run: ./scripts/deploy.sh dist
