name: CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  TURBO_TEAM: bjorntirsens-projects
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}

jobs:
  validate-renovate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Setup Node.js
        uses: actions/setup-node@v4.4.0
        with:
          node-version-file: ".nvmrc"
      - name: Validate renovate.json
        run: npx --yes --package renovate -- renovate-config-validator renovate.json --strict

  quality-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Setup Node.js
        uses: actions/setup-node@v4.4.0
        with:
          node-version-file: ".nvmrc"
      - name: Debug after setup-node
        run: |
          echo "node:" $(node -v)
          echo "npm:" $(npm -v)
          which pnpm || echo "pnpm not installed yet"
      - name: Get pnpm version from package.json
        id: pnpmv
        run: echo "version=$(jq -r '.packageManager' package.json | cut -d'@' -f2)" >> $GITHUB_OUTPUT
      - name: Install pnpm
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4.1.0
        with:
          version: ${{ steps.pnpmv.outputs.version }}
          run_install: false
      - name: Install deps
        run: pnpm install --frozen-lockfile
      - name: Run all quality checks
        run: |
          pnpm turbo run lint --continue
          pnpm turbo run format:check --continue
          pnpm turbo run check:types --continue

  unit:
    needs: [quality-checks]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Setup Node.js
        uses: actions/setup-node@v4.4.0
        with:
          node-version-file: ".nvmrc"
      - name: Get pnpm version from package.json
        id: pnpmv
        run: echo "version=$(jq -r '.packageManager' package.json | cut -d'@' -f2)" >> $GITHUB_OUTPUT
      - name: Install pnpm
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4.1.0
        with:
          version: ${{ steps.pnpmv.outputs.version }}
          run_install: false
      - name: Install deps
        run: pnpm install --frozen-lockfile
      - name: Run unit tests
        run: pnpm turbo run test --continue

  browser-tests:
    needs: [quality-checks]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Setup Node.js
        uses: actions/setup-node@v4.4.0
        with:
          node-version-file: ".nvmrc"
      - name: Get pnpm version from package.json
        id: pnpmv
        run: echo "version=$(jq -r '.packageManager' package.json | cut -d'@' -f2)" >> $GITHUB_OUTPUT
      - name: Install pnpm
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4.1.0
        with:
          version: ${{ steps.pnpmv.outputs.version }}
          run_install: false
      - name: Restore Cypress binary cache
        id: cypress-cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/Cypress
          key: ${{ runner.os }}-cypress-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-cypress-
      - name: Install deps
        run: pnpm install --frozen-lockfile
      - name: Ensure Cypress binary is installed
        working-directory: apps/web
        env:
          CYPRESS_CACHE_FOLDER: ~/.cache/Cypress
        run: pnpm cypress install --force
      - name: Run browser-based tests
        run: pnpm turbo run test:browser-based --continue
      - name: Save Cypress binary cache
        if: steps.cypress-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: ~/.cache/Cypress
          key: ${{ runner.os }}-cypress-${{ hashFiles('**/pnpm-lock.yaml') }}

  build:
    needs: [unit, browser-tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Setup Node.js
        uses: actions/setup-node@v4.4.0
        with:
          node-version-file: ".nvmrc"
      - name: Get pnpm version from package.json
        id: pnpmv
        run: echo "version=$(jq -r '.packageManager' package.json | cut -d'@' -f2)" >> $GITHUB_OUTPUT
      - name: Install pnpm
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4.1.0
        with:
          version: ${{ steps.pnpmv.outputs.version }}
          run_install: false
      - name: Install deps
        run: pnpm install --frozen-lockfile
      - name: Build
        run: pnpm turbo run build --continue
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: apps

  deploy:
    needs: [build, validate-renovate]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v5
      - name: Setup Node.js
        uses: actions/setup-node@v4.4.0
        with:
          node-version-file: ".nvmrc"
      - name: Get pnpm version from package.json
        id: pnpmv
        run: echo "version=$(jq -r '.packageManager' package.json | cut -d'@' -f2)" >> $GITHUB_OUTPUT
      - name: Install pnpm
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4.1.0
        with:
          version: ${{ steps.pnpmv.outputs.version }}
          run_install: false
      - name: Deploy
        run: echo "ðŸš€ Deploy handled by Vercel - pushing to master automatically triggers deployment"
