name: CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: "22.15.1"
  TURBO_CACHE_DIR: .turbo
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  # TURBO_TEAM: your-team-slug   # uncomment if using a Vercel Team

jobs:
  quality: # lint + format:check + typecheck
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js (with pnpm cache)
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm

      - name: Get pnpm version from package.json
        id: pnpmv
        run: echo "PNPM_VERSION=$(jq -r '.packageManager' package.json | cut -d'@' -f2)" >> $GITHUB_ENV

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Install deps
        run: pnpm install --frozen-lockfile

      - name: Restore Turbo cache (fallback to remote cache)
        id: turbo-cache
        uses: actions/cache@v4
        with:
          path: ${{ env.TURBO_CACHE_DIR }}
          key: ${{ runner.os }}-turbo-${{ hashFiles('**/turbo.json','**/pnpm-lock.yaml') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-${{ hashFiles('**/turbo.json','**/pnpm-lock.yaml') }}-
            ${{ runner.os }}-turbo-

      - name: Validate renovate.json
        run: npx --yes --package renovate -- renovate-config-validator renovate.json

      - name: Run quality checks
        run: pnpm turbo run lint format:check typecheck --cache-dir $TURBO_CACHE_DIR --continue

      - name: Save Turbo cache
        uses: actions/cache/save@v4
        if: steps.turbo-cache.outputs.cache-hit != 'true'
        with:
          path: ${{ env.TURBO_CACHE_DIR }}
          key: ${{ runner.os }}-turbo-${{ hashFiles('**/turbo.json','**/pnpm-lock.yaml') }}-${{ github.sha }}

  unit:
    needs: quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js (with pnpm cache)
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm

      - name: Get pnpm version from package.json
        id: pnpmv
        run: echo "PNPM_VERSION=$(jq -r '.packageManager' package.json | cut -d'@' -f2)" >> $GITHUB_ENV

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Install deps
        run: pnpm install --frozen-lockfile

      - name: Restore Turbo cache
        id: turbo-cache
        uses: actions/cache@v4
        with:
          path: ${{ env.TURBO_CACHE_DIR }}
          key: ${{ runner.os }}-turbo-${{ hashFiles('**/turbo.json','**/pnpm-lock.yaml') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-${{ hashFiles('**/turbo.json','**/pnpm-lock.yaml') }}-
            ${{ runner.os }}-turbo-

      - name: Run unit tests
        run: pnpm turbo run test --cache-dir $TURBO_CACHE_DIR --continue

      - name: Save Turbo cache
        uses: actions/cache/save@v4
        if: steps.turbo-cache.outputs.cache-hit != 'true'
        with:
          path: ${{ env.TURBO_CACHE_DIR }}
          key: ${{ runner.os }}-turbo-${{ hashFiles('**/turbo.json','**/pnpm-lock.yaml') }}-${{ github.sha }}

  e2e:
    needs: quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js (with pnpm cache)
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm

      - name: Get pnpm version from package.json
        id: pnpmv
        run: echo "PNPM_VERSION=$(jq -r '.packageManager' package.json | cut -d'@' -f2)" >> $GITHUB_ENV

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Install deps
        run: pnpm install --frozen-lockfile

      - name: Restore Turbo cache
        id: turbo-cache
        uses: actions/cache@v4
        with:
          path: ${{ env.TURBO_CACHE_DIR }}
          key: ${{ runner.os }}-turbo-${{ hashFiles('**/turbo.json','**/pnpm-lock.yaml') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-${{ hashFiles('**/turbo.json','**/pnpm-lock.yaml') }}-
            ${{ runner.os }}-turbo-

      - name: Run e2e tests
        run: pnpm turbo run e2e --cache-dir $TURBO_CACHE_DIR --continue

      - name: Save Turbo cache
        uses: actions/cache/save@v4
        if: steps.turbo-cache.outputs.cache-hit != 'true'
        with:
          path: ${{ env.TURBO_CACHE_DIR }}
          key: ${{ runner.os }}-turbo-${{ hashFiles('**/turbo.json','**/pnpm-lock.yaml') }}-${{ github.sha }}

  build:
    needs: [quality, unit, e2e]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js (with pnpm cache)
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm

      - name: Get pnpm version from package.json
        id: pnpmv
        run: echo "PNPM_VERSION=$(jq -r '.packageManager' package.json | cut -d'@' -f2)" >> $GITHUB_ENV

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Install deps
        run: pnpm install --frozen-lockfile

      - name: Restore Turbo cache
        id: turbo-cache
        uses: actions/cache@v4
        with:
          path: ${{ env.TURBO_CACHE_DIR }}
          key: ${{ runner.os }}-turbo-${{ hashFiles('**/turbo.json','**/pnpm-lock.yaml') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-${{ hashFiles('**/turbo.json','**/pnpm-lock.yaml') }}-
            ${{ runner.os }}-turbo-

      - name: Build
        run: pnpm turbo run build --cache-dir $TURBO_CACHE_DIR --continue

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: |
            apps/**/dist
            packages/**/dist
            !**/node_modules/**

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Deploy
        run: ./scripts/deploy.sh dist
